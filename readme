Author credit: Pouya Ahadi (pouya.ahadi@gatech.edu) and Charles Chen (charles.chen@okstate.edu)

We use Qu-GENE proposed by Ali et al. (2020) to simulate populations. It includes two softwares Engine.exe for simulating initial population and QuLinePlus (QL.exe) for simulating other generations.

We use gene_maker.py to simulate .

Out put of gene_maker.py includes: (assuming 3 trait)

	1. gene_output which includes gene information required for .qug input file for Engine.exe
	2. markers_index.csv: index of genes corresponding to markers
     	3. trait1_index.csv: index of genes corresponding to trait 1
     	4. trait2_index.csv: index of genes corresponding to trait 2
     	5. trait3_index.csv: index of genes corresponding to trait 3

After making .qug file required for Error.exe, we can simulate the initial population. The output Eror.pop will include genotype information of initial population.


We have two types of optimization:

1. Single Objective: where we optimize a single target trait.

	-- single_obj(ecv&pheno).py : This code returns results for two approaches: ECV selection approach and selection based on phenotypic trait value
	This code reads, Error.pop file as well as markers_index.csv, trait1_index.csv, trait2_index.csv, trait3_index.csv.
	By specifying all design parameters, this codes optimally choose parents and runs for desired number of cycles.
	The simulation for a new generation based on selected parents is done by QL.exe file which will be called within the code repeatedly.
	Output of code is allele frequency and phenotypic trait value corresponding to target trait and other exsiting traits (not target).

	-- GEBV_single_obj.py: This code returns results for selection based on GEBV values.
	The general structure of the code is similar to previous case.
	Only difference is that it requires to GEBV.R file within comipiling the code to generate GEBV trait values at each iteration.
	Calculating GEBV values in GEBV.R is based on rrBlup pakage proposed by Endelman2011.


2. Multi Objective: where we optimize multiple objectives using lexicographic approach. The order of importance for traints and the tolerances can be specified within the code.
 
	-- multi_obj(ecv&pheno).py : This codes returns allele frequency and phenotypic trait value for all of generations based on two approached, ECV selection and selection based on phenotypic values.

	-- GEBV_multi_obj.py : This codes returns allele frequency and phenotypic trait value for all of generations based on selection based on GEBV values.
	-- The structure of codes are similar to single trait case except that in optimization part, we use lexicographic approach to select based on multiple objectives.

The results are saved in csv files. The final step is to organize the results and visualize the.

	-- result_data_frame_maker.py : Given correct path to the folder of each population, this code combines the results in a single data frame.
		out put of code includes results for single objective case and inbreeding of selected parents and results for multi objective case and inbreeding of selected parents.

	-- plot_maker.py : Given the correct path to the final csv file created by result_data_frame_maker.py, this code returns corresponding plots.
